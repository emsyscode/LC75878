/**********************************************************************/
/*This code is not clean and OFFCOURSE will be possible do it better! */ 
/*this is only a group of functions to be used as independent code,  */ 
/*and by this way will be possible to any person can do the changes   */ 
/*of code and see what happen.                                         */
/*The code don't depend of any external library or extenal functions  */
/*complicated.                                                         */
/*I'm let the values to sent as binnary, this allow swap bit by bit */
/* to is possible test segment by segment without convert to HEX    */
/**********************************************************************/
/*
 * The following sequences must be observed when power is turned on 
 * and off. (See figures 3, 4, and 5.)Power on: Logic block power 
 * supply (VDD) on LCD driver block power supply (VLCD) on Power 
 * off: LCD driver block power supply (VLCD) off  Logic block power 
 * supply (VDD) off However, if the logic and LCD driver blocks use a 
 * shared power supply, then the power supplies can be turned on and 
 * off at the same time. 
 */

#define VFD_in 7  // This is the pin number 7 on Arduino UNO
#define VFD_clk 8 // This is the pin number 8 on Arduino UNO
#define VFD_ce 9 // This is the pin number 9 on Arduino UNO
#define VFD_Vlcd 10 // This signal power up the LCD and must be on only after VCC

//ATT: On the Uno and other ATMEGA based boards, unsigned ints (unsigned integers) are the same as ints in that they store a 2 byte value.
//Long variables are extended size variables for number storage, and store 32 bits (4 bytes), from -2,147,483,648 to 2,147,483,647.

//*************************************************//
void setup() {
  pinMode(VFD_clk, OUTPUT);
  pinMode(VFD_in, OUTPUT);
  pinMode(VFD_ce, OUTPUT);
  pinMode(VFD_Vlcd, OUTPUT);
 
  pinMode(13, OUTPUT);
  Serial.begin(9600); // only to debug
}
void send_char(unsigned char a)
{
 //
 unsigned char transmit = 15; //define our transmit pin
 unsigned char data = 170; //value to transmit, binary 10101010
 unsigned char mask = 1; //our bitmask
  data=a;
  // the validation of data happen when clk go from LOW to HIGH.
  // This lines is because the clk have one advance in data, see datasheet of sn74HC595
  // case don't have this signal instead of "." will se "g"
  digitalWrite(VFD_ce, LOW); // When strobe is low, all output is enable. If high, all output will be set to low.
  delayMicroseconds(5);
  digitalWrite(VFD_clk,LOW);// need invert the signal to allow 8 bits is is low only send 7 bits
  delayMicroseconds(5);
  for (mask = 0b00000001; mask>0; mask <<= 1) { //iterate through bit mask
  digitalWrite(VFD_clk,LOW);// need invert the signal to allow 8 bits is is low only send 7 bits
  delayMicroseconds(5);
    if (data & mask){ // if bitwise AND resolves to true
      digitalWrite(VFD_in, HIGH);
      //Serial.print(1);
    }
    else{ //if bitwise and resolves to false
      digitalWrite(VFD_in, LOW);
      //Serial.print(0);
    }
    digitalWrite(VFD_clk,HIGH);// need invert the signal to allow 8 bits is is low only send 7 bits
    delayMicroseconds(5);
    //
    digitalWrite(VFD_ce, HIGH); // When strobe is low, all output is enable. If high, all output will be set to low.
  delayMicroseconds(5);
  }
}
/*********************************************************************/
// I h've created 3 functions to send bit's, one with strobe, other without strobe and one with first byte with strobe followed by remaing bits.
void send_char_without(unsigned char a)
{
 unsigned char transmit = 15; //define our transmit pin
 unsigned char data = 170; //value to transmit, binary 10101010
 unsigned char mask = 1; //our bitmask
  data=a;
  for (mask = 0b00000001; mask>0; mask <<= 1) { //iterate through bit mask
  digitalWrite(VFD_clk, LOW);
  delayMicroseconds(5);
    if (data & mask){ // if bitwise AND resolves to true
      digitalWrite(VFD_in, HIGH);
      //Serial.print(1);
    }
    else{ //if bitwise and resolves to false
      digitalWrite(VFD_in, LOW);
      //Serial.print(0);
    }
    digitalWrite(VFD_clk,HIGH);// need invert the signal to allow 8 bits is is low only send 7 bits
    delayMicroseconds(5);
  }
}
/*********************************************************************/
void send_char_8bit_stb(unsigned char a)
{
 unsigned char transmit = 15; //define our transmit pin
 unsigned char data = 170; //value to transmit, binary 10101010
 unsigned char mask = 1; //our bitmask
 int i = -1;
  data=a;
  // This lines is because the clk have one advance in data, see datasheet of sn74HC595
  // case don't have this signal instead of "." will se "g"
  for (mask = 0b00000001; mask>0; mask <<= 1) { //iterate through bit mask
   i++;
   digitalWrite(VFD_clk, LOW);
  delayMicroseconds(5);
    if (data & mask){ // if bitwise AND resolves to true
      digitalWrite(VFD_in, HIGH);
      //Serial.print(1);
    }
    else{ //if bitwise and resolves to false
      digitalWrite(VFD_in, LOW);
      //Serial.print(0);
    }
    digitalWrite(VFD_clk,HIGH);// 
    delayMicroseconds(1);
    if (i==7){
    Serial.println(i);
    digitalWrite(VFD_ce, HIGH);
    delayMicroseconds(1);
    }  
  }
}
/*******************************************************************/
/*******************************************************************/
void sendControl_LC75878(){
//send total of 8 + 16 bits.
//
digitalWrite(VFD_ce, LOW); //
delayMicroseconds(1);
send_char_8bit_stb(0B01001011); // firts 8 bits is CCB(is 0x4B) address, every fixed as (0B01001011), see if clk finish LOW or HIGH Very important!
//Structure is as follow: PC1,PC2,PC3,PC4,CT0,CT1,CT2,CT3,CTC,SC,BU,DT1,DT2,1,0,1. The last 3 bits is mark as control
//Importante: BU normal mode, SC segment on/off, PC1-PC4 general porpuse,CT0-CT3 & CTC contrast display
send_char_without(0B00001000);  send_char_without(0B10100000); //  1:16// Marked as cmd status dsp 
//               (0B0000x---) x adjust contrast, (0Bxxx 1/8 BU SC CTC) General Purpose
//
delayMicroseconds(1);
digitalWrite(VFD_ce, LOW); // 
delayMicroseconds(1);
}
/*******************************************************************/
void allON_LC75878(){
  unsigned char group=0;
//send total of 64 bits, the 4 last bits belongs to set of DR, SC, BU, etc;
//The p0, p1, p2 & p3 at 0, means all pins from s1 to s12 will belongs to segments, other's settings tell will px is a port general purpose!
       for(int i=0; i<5;i++){   // Dx until 600 bits
            group=i;
          digitalWrite(VFD_ce, LOW); //
          delayMicroseconds(1);
          send_char_8bit_stb(0B01001011); //(0x41) firts 8 bits is address, every fixed as (0B01001011), see if clk finish LOW or HIGH Very important!
          delayMicroseconds(1);
          // On the 75878 the message have first 16*8 bits more 8 times to performe 128 bits(last byte is control: 0BXXX00000)
         
          send_char_without(0B11111111);  send_char_without(0B11111111); //   1:8     
          send_char_without(0B11111111);  send_char_without(0B11111111); //  17:24    
          send_char_without(0B11111111);  send_char_without(0B11111111); //  33:40     
          send_char_without(0B11111111);  send_char_without(0B11111111); //  49:56    
          send_char_without(0B11111111);  send_char_without(0B11111111); //  65:72    
          send_char_without(0B11111111);  send_char_without(0B11111111); //  81:88     
          send_char_without(0B11111111);  send_char_without(0B11111111); //  96:103   
          send_char_without(0B11111111);   // 112:119  
              switch (group){ //-120:127//Last 3 bits is "DD" data direction, and is used
                case 0: send_char_without(0B00000000); break;
                case 1: send_char_without(0B10000000); break;
                case 2: send_char_without(0B01000000); break;
                case 3: send_char_without(0B11000000); break;
                case 4: send_char_without(0B00100000); break;
              }
          
      // to mark the 5 groups of 120 bits, 000, 001, 010, 011, 100.
      delayMicroseconds(1);
      digitalWrite(VFD_ce, LOW); // 
      delayMicroseconds(1);
      }
}
/**************************************************************************/
void allOFF_LC75878(){
unsigned char group=0;
//send total of 64 bits, the 4 last bits belongs to set of DR, SC, BU, etc;
//The p0, p1, p2 & p3 at 0, means all pins from s1 to s12 will belongs to segments, other's settings tell will px is a port general purpose!
       for(int i=0; i<5;i++){ // Dx until 600 bits
            group=i;
        digitalWrite(VFD_ce, LOW); //
        delayMicroseconds(1);
        send_char_8bit_stb(0B01001011); //(0x41) firts 8 bits is address, every fixed as (0B01001011), see if clk finish LOW or HIGH Very important!
        delayMicroseconds(1);
      // On the 75878 the message have first 16*8 bits more 8 times to performe 128 bits(last byte is control: 0BXXX00000)
         
          send_char_without(0B00000000);  send_char_without(0B00000000); //   1:8      
          send_char_without(0B00000000);  send_char_without(0B00000000); //  17:24    
          send_char_without(0B00000000);  send_char_without(0B00000000); //  33:40     
          send_char_without(0B00000000);  send_char_without(0B00000000); //  49:56    
          send_char_without(0B00000000);  send_char_without(0B00000000); //  65:72    
          send_char_without(0B00000000);  send_char_without(0B00000000); //  81:88     
          send_char_without(0B00000000);  send_char_without(0B00000000); //  96:103   
          send_char_without(0B00000000);   // 112:119  
              switch (group){ //120:127// Last 3 bits is "DD" data direction, and is used
                case 0: send_char_without(0B00000000); break;
                case 1: send_char_without(0B10000000); break;
                case 2: send_char_without(0B01000000); break;
                case 3: send_char_without(0B11000000); break;
                case 4: send_char_without(0B00100000); break;
              }
      // to mark the 5 groups of 120 bits, 000, 001, 010, 011, 100.
      delayMicroseconds(1);
      digitalWrite(VFD_ce, LOW); // 
      delayMicroseconds(1);
      }
}
/**************************************************************************/
/**************************************************************************/
void loop() {
 //
 allON_LC75878(); // All on
 sendControl_LC75878();
 delay(2000);
 allOFF_LC75878(); // All off
 sendControl_LC75878();
 delay(2000);
 
}
